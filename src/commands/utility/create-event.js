const {
  SlashCommandBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  EmbedBuilder,
} = require("discord.js");
const { EventList } = require("../../dbModels.js");
const {
  CONFIRM_CREATE_EVENT_BUTTON,
  CANCEL_CREATE_EVENT_BUTTON,
} = require("../constants/buttonsIds");
const { EVENT_ROLE_IDS } = require("../constants/roleIds");
const checkPermission = require("../../helpers/checkPermission");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("create-event")
    .setDescription("–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç")
    .addStringOption((option) =>
      option
        .setName("title")
        .setDescription("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
        .setRequired(true)
        .setMaxLength(255),
    )
    .addStringOption((option) =>
      option
        .setName("description")
        .setDescription("–û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞")
        .setRequired(true),
    )
    .addStringOption((option) =>
      option
        .setName("banner")
        .setDescription(
          "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≥–∏—Ñ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–≤–µ–Ω—Ç–µ",
        )
        .setRequired(true)
        .setMaxLength(255),
    ),

  async execute(interaction) {
    if (!checkPermission(interaction, EVENT_ROLE_IDS)) {
      await interaction.reply({
        content: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
        ephemeral: true,
      });
      return;
    }

    const options = interaction.options?._hoistedOptions;

    const confirmCreateEventButton = new ButtonBuilder()
      .setCustomId(CONFIRM_CREATE_EVENT_BUTTON)
      .setLabel("‚úÖ")
      .setStyle(ButtonStyle.Success);

    const cancelCreateEventButton = new ButtonBuilder()
      .setCustomId(CANCEL_CREATE_EVENT_BUTTON)
      .setLabel("‚õî")
      .setStyle(ButtonStyle.Danger);

    const announceEventActionRow = new ActionRowBuilder().addComponents(
      confirmCreateEventButton,
      cancelCreateEventButton,
    );

    if (!options) {
      await interaction.reply({
        content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞",
        ephemeral: true,
      });
      return;
    }
    try {
      // @TODO: transfer this function in helpers
      const transformedOptions = options?.reduce(
        (acc, option) => ({ ...acc, [option.name]: option.value }),
        {},
      );
      const embed = new EmbedBuilder()
        .setTitle(`üîî  –ò–≤–µ–Ω—Ç ‚Äî ${transformedOptions?.title}`)
        .setDescription("```" + transformedOptions?.description + "```")
        .setFields(
          { name: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤", value: "0", inline: true },
          {
            name: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ",
            value: "75 ü™ô",
            inline: true,
          },
        )
        .setImage(transformedOptions.banner);

      const message = await interaction.reply({
        content: "–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∏–≤–µ–Ω—Ç–∞",
        embeds: [embed],
        components: [announceEventActionRow],
        ephemeral: true,
      });
      const filter = (i) => i.user.id === interaction.user.id;
      try {
        const confirmation = await message.awaitMessageComponent({
          filter,
          time: 60000,
        });
        if (confirmation.customId === CONFIRM_CREATE_EVENT_BUTTON) {
          await EventList.create(transformedOptions);
          await confirmation.reply({
            content: "–ò–≤–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            embeds: [embed],
            components: [],
            ephemeral: false,
          });
        } else if (confirmation.customId === CANCEL_CREATE_EVENT_BUTTON) {
          await confirmation.update({
            content: "–°–æ–∑–¥–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            embeds: [],
            components: [],
            ephemeral: true,
          });
        }
      } catch (e) {
        if (e?.name === "SequelizeUniqueConstraintError") {
          await interaction.followUp({
            content: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${e.parent?.detail}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`,
            ephemeral: true,
          });
          return;
        }
        await interaction.followUp({
          content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`,
          ephemeral: true,
        });
      }
    } catch (e) {
      console.log(e);
      await interaction.followUp({
        content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        ephemeral: true,
      });
    }
  },
};
